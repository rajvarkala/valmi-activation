import os

from dagster_docker import docker_container_op

from dagster import DefaultScheduleStatus, ScheduleDefinition, graph, op

@op
def initialise():
    pass

source_op = docker_container_op.configured(
    {
        "image": "{{ sync['source']['credential']['docker_image'] }}:{{ sync['source']['credential']['docker_tag'] }}",
        "command": [
            "read",
            "--config",
            "/tmp/config.json",
            "--catalog",
            "/tmp/configured_catalog.json",
        ],
        "container_kwargs": {  # keyword args to be passed to the container. example:
            "volumes": ["{{ prefix }}/intermediate_store:{{ prefix }}/intermediate_store","{{ prefix }}/{{ app }}/repo/config/{{ sync['id'] }}-{{ sync['source']['id'] }}.json:/tmp/config.json" , "{{prefix}}/{{app}}/repo/catalog/{{sync['id']}}-{{ sync['source']['id'] }}.json:/tmp/configured_catalog.json"],
        },
        "env_vars": list({**os.environ}.keys()),
    },
    name="source_op_{{ sync['id'].replace('-','_') }}",
)
destination_op = docker_container_op.configured(
        {
            "image": "{{ sync['destination']['credential']['docker_image'] }}:{{ sync['destination']['credential']['docker_tag'] }}",
            "command": ["write",
                "--config",
                "/tmp/config.json",
                "--catalog",
                "/tmp/configured_catalog.json"],
            "container_kwargs": {  # keyword args to be passed to the container. example:
            "volumes": ["{{ prefix }}/intermediate_store:{{ prefix }}/intermediate_store","{{ prefix }}/{{ app }}/repo/config/{{sync['id']}}-{{ sync['destination']['id'] }}.json:/tmp/config.json" , "{{prefix}}/{{app}}/repo/catalog/{{sync['id']}}-{{ sync['destination']['id'] }}.json:/tmp/configured_catalog.json"],
        },
        "env_vars": list({**os.environ}.keys()),
    },
    name="destination_op_{{ sync['id'].replace('-','_') }}",
)


@op(name="finalizer_{{ sync['id'].replace('-','_') }}")
def finalizer(context, a, b) -> None:
    context.log.info("finalizer")


def job():
    @graph(name="graph_{{ sync['id'].replace('-','_') }}")
    def sync_graph():
        i = initialise()
        a = source_op (i)
        b = destination_op(i)
        finalizer(a, b) 

    return sync_graph.to_job(name="{{ sync['id'].replace('-','_') }}")


def schedule():
    return ScheduleDefinition(
        cron_schedule="0 0 1 1 *",
        job=job(),
        default_status=DefaultScheduleStatus.STOPPED,
        execution_timezone="US/Central",
    )
