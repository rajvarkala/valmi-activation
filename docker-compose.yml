version: "3.8"

services:
  # This service runs dagit, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from dagit will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagit:
    container_name: valmi-dagit
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "4002"
      - -w
      - workspace.yaml
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - /tmp/shared_dir:/tmp/shared_dir
    networks:
      - valmi-network
    depends_on:
      - valmi-db
      - valmi-repo

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    entrypoint:
      - dagster-daemon
      - run
    container_name: valmi-dagster-daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      ACTIVATION_ENGINE_URL: ${ACTIVATION_ENGINE_URL}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - /tmp/shared_dir:/tmp/shared_dir
    networks:
      - valmi-network
    depends_on:
      - valmi-db
      - valmi-repo

  ###############################################################################################
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  valmi-db:
    image: postgres:13.2
    container_name: valmi-db
    command: ["postgres", "-c", "log_statement=all"]
    volumes:
      - postgres:${PGDATA}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA}
    restart: unless-stopped
    networks:
      - valmi-network

  # This service runs the gRPC server that loads your user code, in both dagit
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by dagit.
  valmi-repo:
    container_name: valmi-repo
    image: valmiio/valmi-repo
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DAGSTER_CURRENT_IMAGE: ${DAGSTER_CURRENT_IMAGE}
    networks:
      - valmi-network
    volumes: # Make docker client accessible so we can terminate containers from dagit
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/shared_dir:/tmp/shared_dir:z

  valmi-activation:
    command:
      [
        "uvicorn",
        "main:app",
        "--port",
        "8000",
        "--host",
        "0.0.0.0",
        "--log-level",
        "debug",
        "--reload",
      ]
    container_name: valmi-activation
    restart: on-failure
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/shared_dir:/tmp/shared_dir:z
    networks:
      - valmi-network
    depends_on:
      - valmi-db
      - dagit
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@valmi-db:5432/valmi_activation"
      APP_BACKEND: ${APP_BACKEND}
      DAGIT_HOST: ${DAGIT_HOST}
      DAGIT_PORT: ${DAGIT_PORT}

  valmi-app-backend:
    env_file:
      - ./valmi-app-backend/.env
    ports:
      - "4000:4000"
    container_name: valmi-app-backend
    restart: on-failure
    networks:
      - valmi-network
    depends_on:
      - valmi-db
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@valmi-db:5432/valmi_app"
      ACTIVATION_SERVER: ${ACTIVATION_ENGINE_URL}
    volumes:
      - ./valmi-app-backend/.env:/workspace/.env

volumes:
  postgres:

networks:
  valmi-network:
    driver: bridge
    name: valmi-network
